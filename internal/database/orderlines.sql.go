// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: orderlines.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrderLine = `-- name: CreateOrderLine :execresult
INSERT INTO order_lines(
    order_id,
    line_type,
    sku,
    price,
    barcode,
    qty,
    tax_rate,
    tax_total,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateOrderLineParams struct {
	OrderID   []byte         `json:"order_id"`
	LineType  sql.NullString `json:"line_type"`
	Sku       string         `json:"sku"`
	Price     sql.NullString `json:"price"`
	Barcode   sql.NullInt32  `json:"barcode"`
	Qty       sql.NullInt32  `json:"qty"`
	TaxRate   sql.NullString `json:"tax_rate"`
	TaxTotal  sql.NullString `json:"tax_total"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) CreateOrderLine(ctx context.Context, arg CreateOrderLineParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderLine,
		arg.OrderID,
		arg.LineType,
		arg.Sku,
		arg.Price,
		arg.Barcode,
		arg.Qty,
		arg.TaxRate,
		arg.TaxTotal,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getOrderLinesByOrder = `-- name: GetOrderLinesByOrder :many
SELECT
    sku,
    line_type,
    price,
    barcode,
    qty,
    tax_rate,
    tax_total,
    updated_at
FROM order_lines
WHERE order_id = ? AND line_type = 'line'
`

type GetOrderLinesByOrderRow struct {
	Sku       string         `json:"sku"`
	LineType  sql.NullString `json:"line_type"`
	Price     sql.NullString `json:"price"`
	Barcode   sql.NullInt32  `json:"barcode"`
	Qty       sql.NullInt32  `json:"qty"`
	TaxRate   sql.NullString `json:"tax_rate"`
	TaxTotal  sql.NullString `json:"tax_total"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetOrderLinesByOrder(ctx context.Context, orderID []byte) ([]GetOrderLinesByOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderLinesByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderLinesByOrderRow
	for rows.Next() {
		var i GetOrderLinesByOrderRow
		if err := rows.Scan(
			&i.Sku,
			&i.LineType,
			&i.Price,
			&i.Barcode,
			&i.Qty,
			&i.TaxRate,
			&i.TaxTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShippingLinesByOrder = `-- name: GetShippingLinesByOrder :many
SELECT
    sku,
    line_type,
    price,
    barcode,
    qty,
    tax_rate,
    tax_total,
    updated_at
FROM order_lines
WHERE order_id = ? AND line_type = 'shipping'
`

type GetShippingLinesByOrderRow struct {
	Sku       string         `json:"sku"`
	LineType  sql.NullString `json:"line_type"`
	Price     sql.NullString `json:"price"`
	Barcode   sql.NullInt32  `json:"barcode"`
	Qty       sql.NullInt32  `json:"qty"`
	TaxRate   sql.NullString `json:"tax_rate"`
	TaxTotal  sql.NullString `json:"tax_total"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetShippingLinesByOrder(ctx context.Context, orderID []byte) ([]GetShippingLinesByOrderRow, error) {
	rows, err := q.db.QueryContext(ctx, getShippingLinesByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShippingLinesByOrderRow
	for rows.Next() {
		var i GetShippingLinesByOrderRow
		if err := rows.Scan(
			&i.Sku,
			&i.LineType,
			&i.Price,
			&i.Barcode,
			&i.Qty,
			&i.TaxRate,
			&i.TaxTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderLine = `-- name: UpdateOrderLine :execresult
UPDATE order_lines
SET
    order_id = ?,
    line_type = ?,
    sku = ?,
    price = ?,
    barcode = ?,
    qty = ?,
    tax_rate = ?,
    tax_total = ?,
    created_at = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateOrderLineParams struct {
	OrderID   []byte         `json:"order_id"`
	LineType  sql.NullString `json:"line_type"`
	Sku       string         `json:"sku"`
	Price     sql.NullString `json:"price"`
	Barcode   sql.NullInt32  `json:"barcode"`
	Qty       sql.NullInt32  `json:"qty"`
	TaxRate   sql.NullString `json:"tax_rate"`
	TaxTotal  sql.NullString `json:"tax_total"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        []byte         `json:"id"`
}

func (q *Queries) UpdateOrderLine(ctx context.Context, arg UpdateOrderLineParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrderLine,
		arg.OrderID,
		arg.LineType,
		arg.Sku,
		arg.Price,
		arg.Barcode,
		arg.Qty,
		arg.TaxRate,
		arg.TaxTotal,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
}
