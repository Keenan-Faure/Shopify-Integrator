// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: shopify_settings.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addShopifySetting = `-- name: AddShopifySetting :exec
INSERT INTO shopify_settings(
    id,
    key,
    value,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type AddShopifySettingParams struct {
	ID        uuid.UUID `json:"id"`
	Key       string    `json:"key"`
	Value     string    `json:"value"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) AddShopifySetting(ctx context.Context, arg AddShopifySettingParams) error {
	_, err := q.db.ExecContext(ctx, addShopifySetting,
		arg.ID,
		arg.Key,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getShopifySettingByKey = `-- name: GetShopifySettingByKey :one
SELECT
    value,
    updated_at
FROM shopify_settings
WHERE key = $1
`

type GetShopifySettingByKeyRow struct {
	Value     string    `json:"value"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetShopifySettingByKey(ctx context.Context, key string) (GetShopifySettingByKeyRow, error) {
	row := q.db.QueryRowContext(ctx, getShopifySettingByKey, key)
	var i GetShopifySettingByKeyRow
	err := row.Scan(&i.Value, &i.UpdatedAt)
	return i, err
}

const removeShopifySetting = `-- name: RemoveShopifySetting :exec
DELETE FROM shopify_settings
WHERE key = $1
`

func (q *Queries) RemoveShopifySetting(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, removeShopifySetting, key)
	return err
}

const updateShopifySetting = `-- name: UpdateShopifySetting :exec
UPDATE shopify_settings
SET
    value = $1
WHERE key = $2
`

type UpdateShopifySettingParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateShopifySetting(ctx context.Context, arg UpdateShopifySettingParams) error {
	_, err := q.db.ExecContext(ctx, updateShopifySetting, arg.Value, arg.Key)
	return err
}
