// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: variants_pricing.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createVariantPricing = `-- name: CreateVariantPricing :execresult
INSERT INTO variant_pricing(
    id,
    variant_id,
    name,
    value,
    created_at,
    updated_at
) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateVariantPricingParams struct {
	ID        string    `json:"id"`
	VariantID string    `json:"variant_id"`
	Name      string    `json:"name"`
	Value     string    `json:"value"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateVariantPricing(ctx context.Context, arg CreateVariantPricingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createVariantPricing,
		arg.ID,
		arg.VariantID,
		arg.Name,
		arg.Value,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getVariantPricing = `-- name: GetVariantPricing :many
SELECT 
    name,
    value,
    updated_at
FROM variant_pricing
WHERE variant_id = ?
`

type GetVariantPricingRow struct {
	Name      string    `json:"name"`
	Value     string    `json:"value"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetVariantPricing(ctx context.Context, variantID string) ([]GetVariantPricingRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantPricing, variantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantPricingRow
	for rows.Next() {
		var i GetVariantPricingRow
		if err := rows.Scan(&i.Name, &i.Value, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVariantPricing = `-- name: UpdateVariantPricing :execresult
UPDATE variant_pricing
SET
    name = ?,
    value = ?,
    updated_at = ?
WHERE variant_id = ?
`

type UpdateVariantPricingParams struct {
	Name      string    `json:"name"`
	Value     string    `json:"value"`
	UpdatedAt time.Time `json:"updated_at"`
	VariantID string    `json:"variant_id"`
}

func (q *Queries) UpdateVariantPricing(ctx context.Context, arg UpdateVariantPricingParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateVariantPricing,
		arg.Name,
		arg.Value,
		arg.UpdatedAt,
		arg.VariantID,
	)
}
