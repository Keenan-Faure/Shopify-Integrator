// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: customers.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :execresult
INSERT INTO customers(
    first_name,
    last_name,
    created_at,
    updated_at
) VALUES(
    ?, ?, ?, ?
)
`

type CreateCustomerParams struct {
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createCustomer,
		arg.FirstName,
		arg.LastName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT
    c.first_name,
    c.last_name,
    c.updated_at,
    a.address1,
    a.address2,
    a.first_name,
    a.last_name,
    a.suburb,
    a.city,
    a.province,
    a.company,
    a.postal_code,
    a.updated_at
FROM customers c
INNER JOIN address a
ON c.id = a.customer_id
WHERE c.id = ?
`

type GetCustomerByIDRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Address1    sql.NullString `json:"address1"`
	Address2    sql.NullString `json:"address2"`
	FirstName_2 string         `json:"first_name_2"`
	LastName_2  string         `json:"last_name_2"`
	Suburb      sql.NullString `json:"suburb"`
	City        sql.NullString `json:"city"`
	Province    sql.NullString `json:"province"`
	Company     sql.NullString `json:"company"`
	PostalCode  sql.NullString `json:"postal_code"`
	UpdatedAt_2 time.Time      `json:"updated_at_2"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, id []byte) (GetCustomerByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.Address1,
		&i.Address2,
		&i.FirstName_2,
		&i.LastName_2,
		&i.Suburb,
		&i.City,
		&i.Province,
		&i.Company,
		&i.PostalCode,
		&i.UpdatedAt_2,
	)
	return i, err
}

const getCustomersByName = `-- name: GetCustomersByName :many
SELECT
    c.first_name,
    c.last_name,
    c.updated_at,
    a.address1,
    a.address2,
    a.first_name,
    a.last_name,
    a.suburb,
    a.city,
    a.province,
    a.company,
    a.postal_code,
    a.updated_at
FROM customers c
INNER JOIN address a
ON c.id = a.customer_id
WHERE CONCAT(first_name, ' ', last_name) REGEXP ?
LIMIT ? OFFSET ?
`

type GetCustomersByNameParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCustomersByNameRow struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Address1    sql.NullString `json:"address1"`
	Address2    sql.NullString `json:"address2"`
	FirstName_2 string         `json:"first_name_2"`
	LastName_2  string         `json:"last_name_2"`
	Suburb      sql.NullString `json:"suburb"`
	City        sql.NullString `json:"city"`
	Province    sql.NullString `json:"province"`
	Company     sql.NullString `json:"company"`
	PostalCode  sql.NullString `json:"postal_code"`
	UpdatedAt_2 time.Time      `json:"updated_at_2"`
}

func (q *Queries) GetCustomersByName(ctx context.Context, arg GetCustomersByNameParams) ([]GetCustomersByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomersByName, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersByNameRow
	for rows.Next() {
		var i GetCustomersByNameRow
		if err := rows.Scan(
			&i.FirstName,
			&i.LastName,
			&i.UpdatedAt,
			&i.Address1,
			&i.Address2,
			&i.FirstName_2,
			&i.LastName_2,
			&i.Suburb,
			&i.City,
			&i.Province,
			&i.Company,
			&i.PostalCode,
			&i.UpdatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :execresult
UPDATE customers
SET
    first_name = ?,
    last_name = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateCustomerParams struct {
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        []byte    `json:"id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateCustomer,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
		arg.ID,
	)
}
