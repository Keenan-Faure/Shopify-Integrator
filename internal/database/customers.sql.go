// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customers.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers(
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    created_at,
    updated_at
) VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, web_customer_code, first_name, last_name, email, phone, created_at, updated_at
`

type CreateCustomerParams struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.ID,
		arg.WebCustomerCode,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.WebCustomerCode,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    updated_at
FROM customers
WHERE id = $1
`

type GetCustomerByIDRow struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetCustomerByID(ctx context.Context, id uuid.UUID) (GetCustomerByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByID, id)
	var i GetCustomerByIDRow
	err := row.Scan(
		&i.ID,
		&i.WebCustomerCode,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByWebCode = `-- name: GetCustomerByWebCode :one
SELECT
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    updated_at
FROM customers
WHERE web_customer_code = $1
`

type GetCustomerByWebCodeRow struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetCustomerByWebCode(ctx context.Context, webCustomerCode string) (GetCustomerByWebCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByWebCode, webCustomerCode)
	var i GetCustomerByWebCodeRow
	err := row.Scan(
		&i.ID,
		&i.WebCustomerCode,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    updated_at
FROM customers
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type GetCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCustomersRow struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetCustomers(ctx context.Context, arg GetCustomersParams) ([]GetCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.WebCustomerCode,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersByName = `-- name: GetCustomersByName :many
SELECT
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    updated_at
FROM customers
WHERE CONCAT(first_name, ' ', last_name) SIMILAR TO $1
AND first_name LIKE $1
AND last_name LIKE $1
LIMIT 10
`

type GetCustomersByNameRow struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetCustomersByName(ctx context.Context, similarToEscape string) ([]GetCustomersByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomersByName, similarToEscape)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersByNameRow
	for rows.Next() {
		var i GetCustomersByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.WebCustomerCode,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCustomer = `-- name: RemoveCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) RemoveCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeCustomer, id)
	return err
}

const removeCustomerByWebCustomerCode = `-- name: RemoveCustomerByWebCustomerCode :exec
DELETE FROM customers
WHERE web_customer_code = $1
`

func (q *Queries) RemoveCustomerByWebCustomerCode(ctx context.Context, webCustomerCode string) error {
	_, err := q.db.ExecContext(ctx, removeCustomerByWebCustomerCode, webCustomerCode)
	return err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customers
SET
    first_name = $1,
    last_name = $2,
    email = $3,
    phone = $4,
    updated_at = $5
WHERE id = $6
`

type UpdateCustomerParams struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomer,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateCustomerByWebCode = `-- name: UpdateCustomerByWebCode :exec
UPDATE customers
SET
    first_name = $1,
    last_name = $2,
    email = $3,
    phone = $4,
    updated_at = $5
WHERE web_customer_code = $6
`

type UpdateCustomerByWebCodeParams struct {
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	UpdatedAt       time.Time      `json:"updated_at"`
	WebCustomerCode string         `json:"web_customer_code"`
}

func (q *Queries) UpdateCustomerByWebCode(ctx context.Context, arg UpdateCustomerByWebCodeParams) error {
	_, err := q.db.ExecContext(ctx, updateCustomerByWebCode,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.UpdatedAt,
		arg.WebCustomerCode,
	)
	return err
}

const upsertCustomer = `-- name: UpsertCustomer :one
INSERT INTO customers(
    id,
    web_customer_code,
    first_name,
    last_name,
    email,
    phone,
    created_at,
    updated_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT(web_customer_code)
DO UPDATE 
SET
    first_name = COALESCE($3, customers.first_name),
    last_name = COALESCE($4, customers.last_name),
    email = COALESCE($5, customers.email),
    phone = COALESCE($6, customers.phone),
    updated_at = $8
RETURNING id, web_customer_code, first_name, last_name, email, phone, created_at, updated_at, (xmax = 0) AS inserted
`

type UpsertCustomerParams struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

type UpsertCustomerRow struct {
	ID              uuid.UUID      `json:"id"`
	WebCustomerCode string         `json:"web_customer_code"`
	FirstName       string         `json:"first_name"`
	LastName        string         `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
	Inserted        bool           `json:"inserted"`
}

func (q *Queries) UpsertCustomer(ctx context.Context, arg UpsertCustomerParams) (UpsertCustomerRow, error) {
	row := q.db.QueryRowContext(ctx, upsertCustomer,
		arg.ID,
		arg.WebCustomerCode,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i UpsertCustomerRow
	err := row.Scan(
		&i.ID,
		&i.WebCustomerCode,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Inserted,
	)
	return i, err
}
