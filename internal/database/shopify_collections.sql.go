// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: shopify_collections.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createShopifyCollection = `-- name: CreateShopifyCollection :exec
INSERT INTO shopify_collections(
    ID,
    product_collection,
    shopify_collection_id,
    created_at,
    updated_at
) VALUES ($1, $2, $3, $4, $5)
`

type CreateShopifyCollectionParams struct {
	ID                  uuid.UUID      `json:"id"`
	ProductCollection   sql.NullString `json:"product_collection"`
	ShopifyCollectionID string         `json:"shopify_collection_id"`
	CreatedAt           time.Time      `json:"created_at"`
	UpdatedAt           time.Time      `json:"updated_at"`
}

func (q *Queries) CreateShopifyCollection(ctx context.Context, arg CreateShopifyCollectionParams) error {
	_, err := q.db.ExecContext(ctx, createShopifyCollection,
		arg.ID,
		arg.ProductCollection,
		arg.ShopifyCollectionID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getShopifyCollection = `-- name: GetShopifyCollection :one
SELECT
    product_collection,
    shopify_collection_id,
    updated_at
FROM shopify_collections
WHERE product_collection = $1
LIMIT 1
`

type GetShopifyCollectionRow struct {
	ProductCollection   sql.NullString `json:"product_collection"`
	ShopifyCollectionID string         `json:"shopify_collection_id"`
	UpdatedAt           time.Time      `json:"updated_at"`
}

func (q *Queries) GetShopifyCollection(ctx context.Context, productCollection sql.NullString) (GetShopifyCollectionRow, error) {
	row := q.db.QueryRowContext(ctx, getShopifyCollection, productCollection)
	var i GetShopifyCollectionRow
	err := row.Scan(&i.ProductCollection, &i.ShopifyCollectionID, &i.UpdatedAt)
	return i, err
}

const updateShopifyCollection = `-- name: UpdateShopifyCollection :exec
UPDATE shopify_collections
SET
    shopify_collection_id = $1
WHERE product_collection = $2
`

type UpdateShopifyCollectionParams struct {
	ShopifyCollectionID string         `json:"shopify_collection_id"`
	ProductCollection   sql.NullString `json:"product_collection"`
}

func (q *Queries) UpdateShopifyCollection(ctx context.Context, arg UpdateShopifyCollectionParams) error {
	_, err := q.db.ExecContext(ctx, updateShopifyCollection, arg.ShopifyCollectionID, arg.ProductCollection)
	return err
}
