// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
    id,
    name,
    webhook_token,
    created_at,
    updated_at,
    api_key
) VALUES (
    ?, ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	ID           string    `json:"id"`
	Name         string    `json:"name"`
	WebhookToken string    `json:"webhook_token"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	ApiKey       string    `json:"api_key"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.WebhookToken,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ApiKey,
	)
}

const getUserByApiKey = `-- name: GetUserByApiKey :one
SELECT id, webhook_token, created_at, updated_at, name, api_key FROM users
WHERE api_key = ?
LIMIT 1
`

func (q *Queries) GetUserByApiKey(ctx context.Context, apiKey string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByApiKey, apiKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WebhookToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, webhook_token, created_at, updated_at, name, api_key FROM users
WHERE name = ?
LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.WebhookToken,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.ApiKey,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users 
SET
    name = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        string    `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser, arg.Name, arg.UpdatedAt, arg.ID)
}

const validateWebhookByUser = `-- name: ValidateWebhookByUser :one
SELECT
    name
FROM users
WHERE 
webhook_token = ? AND name = ?
`

type ValidateWebhookByUserParams struct {
	WebhookToken string `json:"webhook_token"`
	Name         string `json:"name"`
}

func (q *Queries) ValidateWebhookByUser(ctx context.Context, arg ValidateWebhookByUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, validateWebhookByUser, arg.WebhookToken, arg.Name)
	var name string
	err := row.Scan(&name)
	return name, err
}
