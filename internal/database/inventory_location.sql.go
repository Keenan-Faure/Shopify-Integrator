// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: inventory_location.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInventoryLocation = `-- name: CreateInventoryLocation :exec
INSERT INTO inventory_location(
    ID,
    shopify_location_id,
    inventory_item_id,
    warehouse_name,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateInventoryLocationParams struct {
	ID                uuid.UUID `json:"id"`
	ShopifyLocationID string    `json:"shopify_location_id"`
	InventoryItemID   string    `json:"inventory_item_id"`
	WarehouseName     string    `json:"warehouse_name"`
	CreatedAt         time.Time `json:"created_at"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) CreateInventoryLocation(ctx context.Context, arg CreateInventoryLocationParams) error {
	_, err := q.db.ExecContext(ctx, createInventoryLocation,
		arg.ID,
		arg.ShopifyLocationID,
		arg.InventoryItemID,
		arg.WarehouseName,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getInventoryLocationLink = `-- name: GetInventoryLocationLink :one
SELECT
    shopify_location_id,
    warehouse_name,
    updated_at
FROM inventory_location
WHERE inventory_item_id = $1
AND  warehouse_name = $2
`

type GetInventoryLocationLinkParams struct {
	InventoryItemID string `json:"inventory_item_id"`
	WarehouseName   string `json:"warehouse_name"`
}

type GetInventoryLocationLinkRow struct {
	ShopifyLocationID string    `json:"shopify_location_id"`
	WarehouseName     string    `json:"warehouse_name"`
	UpdatedAt         time.Time `json:"updated_at"`
}

func (q *Queries) GetInventoryLocationLink(ctx context.Context, arg GetInventoryLocationLinkParams) (GetInventoryLocationLinkRow, error) {
	row := q.db.QueryRowContext(ctx, getInventoryLocationLink, arg.InventoryItemID, arg.WarehouseName)
	var i GetInventoryLocationLinkRow
	err := row.Scan(&i.ShopifyLocationID, &i.WarehouseName, &i.UpdatedAt)
	return i, err
}

const removeLinkBySKU = `-- name: RemoveLinkBySKU :exec
DELETE FROM inventory_location
WHERE inventory_item_id IN (
    SELECT shopify_inventory_id
    FROM shopify_vid
    WHERE sku = $1
)
`

func (q *Queries) RemoveLinkBySKU(ctx context.Context, sku string) error {
	_, err := q.db.ExecContext(ctx, removeLinkBySKU, sku)
	return err
}

const updateInventoryLocation = `-- name: UpdateInventoryLocation :exec
UPDATE inventory_location
SET
    shopify_location_id = $1,
    warehouse_name = $2,
    updated_at = $3
WHERE inventory_item_id = $4
`

type UpdateInventoryLocationParams struct {
	ShopifyLocationID string    `json:"shopify_location_id"`
	WarehouseName     string    `json:"warehouse_name"`
	UpdatedAt         time.Time `json:"updated_at"`
	InventoryItemID   string    `json:"inventory_item_id"`
}

func (q *Queries) UpdateInventoryLocation(ctx context.Context, arg UpdateInventoryLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateInventoryLocation,
		arg.ShopifyLocationID,
		arg.WarehouseName,
		arg.UpdatedAt,
		arg.InventoryItemID,
	)
	return err
}
