// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customer_address.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerAddress = `-- name: CreateCustomerAddress :exec
INSERT INTO customer_address (
    id,
    customer_id,
    address_id,
    address_type,
    updated_at,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreateCustomerAddressParams struct {
	ID          uuid.UUID `json:"id"`
	CustomerID  uuid.UUID `json:"customer_id"`
	AddressID   uuid.UUID `json:"address_id"`
	AddressType string    `json:"address_type"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateCustomerAddress(ctx context.Context, arg CreateCustomerAddressParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerAddress,
		arg.ID,
		arg.CustomerID,
		arg.AddressID,
		arg.AddressType,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const getAddressByCustomerAndType = `-- name: GetAddressByCustomerAndType :one
SELECT
    address_id
FROM customer_address
WHERE customer_id = $1 AND address_type = $2
`

type GetAddressByCustomerAndTypeParams struct {
	CustomerID  uuid.UUID `json:"customer_id"`
	AddressType string    `json:"address_type"`
}

func (q *Queries) GetAddressByCustomerAndType(ctx context.Context, arg GetAddressByCustomerAndTypeParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getAddressByCustomerAndType, arg.CustomerID, arg.AddressType)
	var address_id uuid.UUID
	err := row.Scan(&address_id)
	return address_id, err
}

const getAddressByCustomerID = `-- name: GetAddressByCustomerID :many
SELECT
    address_id
FROM customer_address
WHERE customer_id = $1
`

func (q *Queries) GetAddressByCustomerID(ctx context.Context, customerID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getAddressByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var address_id uuid.UUID
		if err := rows.Scan(&address_id); err != nil {
			return nil, err
		}
		items = append(items, address_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
