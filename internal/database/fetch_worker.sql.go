// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: fetch_worker.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFetchWorker = `-- name: CreateFetchWorker :exec
INSERT INTO fetch_worker(
    id,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
)
`

type CreateFetchWorkerParams struct {
	ID        uuid.UUID `json:"id"`
	Status    string    `json:"status"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateFetchWorker(ctx context.Context, arg CreateFetchWorkerParams) error {
	_, err := q.db.ExecContext(ctx, createFetchWorker,
		arg.ID,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getFetchWorker = `-- name: GetFetchWorker :one
SELECT id, status, created_at, updated_at FROM fetch_worker
LIMIT 1
`

func (q *Queries) GetFetchWorker(ctx context.Context) (FetchWorker, error) {
	row := q.db.QueryRowContext(ctx, getFetchWorker)
	var i FetchWorker
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFetchWorker = `-- name: UpdateFetchWorker :exec
UPDATE fetch_worker
SET
    status = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateFetchWorkerParams struct {
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateFetchWorker(ctx context.Context, arg UpdateFetchWorkerParams) error {
	_, err := q.db.ExecContext(ctx, updateFetchWorker, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
