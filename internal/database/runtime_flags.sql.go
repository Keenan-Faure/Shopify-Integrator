// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: runtime_flags.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addRunTimeFlag = `-- name: AddRunTimeFlag :exec
INSERT INTO runtime_flags(
    id,
    flag_name,
    flag_value,
    updated_at,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type AddRunTimeFlagParams struct {
	ID        uuid.UUID `json:"id"`
	FlagName  string    `json:"flag_name"`
	FlagValue bool      `json:"flag_value"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) AddRunTimeFlag(ctx context.Context, arg AddRunTimeFlagParams) error {
	_, err := q.db.ExecContext(ctx, addRunTimeFlag,
		arg.ID,
		arg.FlagName,
		arg.FlagValue,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const getRuntimeFlag = `-- name: GetRuntimeFlag :one
SELECT
    flag_name,
    flag_value,
    updated_at
FROM runtime_flags
WHERE flag_name = $1
`

type GetRuntimeFlagRow struct {
	FlagName  string    `json:"flag_name"`
	FlagValue bool      `json:"flag_value"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetRuntimeFlag(ctx context.Context, flagName string) (GetRuntimeFlagRow, error) {
	row := q.db.QueryRowContext(ctx, getRuntimeFlag, flagName)
	var i GetRuntimeFlagRow
	err := row.Scan(&i.FlagName, &i.FlagValue, &i.UpdatedAt)
	return i, err
}

const removeRuntimeFlag = `-- name: RemoveRuntimeFlag :exec
DELETE FROM runtime_flags WHERE flag_name = $1
`

func (q *Queries) RemoveRuntimeFlag(ctx context.Context, flagName string) error {
	_, err := q.db.ExecContext(ctx, removeRuntimeFlag, flagName)
	return err
}

const upsertRunTimeFlag = `-- name: UpsertRunTimeFlag :exec
INSERT INTO runtime_flags(
    id,
    flag_name,
    flag_value,
    updated_at,
    created_at
) VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(flag_name)
DO UPDATE
SET
    flag_value = $3,
    updated_at = $4
`

type UpsertRunTimeFlagParams struct {
	ID        uuid.UUID `json:"id"`
	FlagName  string    `json:"flag_name"`
	FlagValue bool      `json:"flag_value"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UpsertRunTimeFlag(ctx context.Context, arg UpsertRunTimeFlagParams) error {
	_, err := q.db.ExecContext(ctx, upsertRunTimeFlag,
		arg.ID,
		arg.FlagName,
		arg.FlagValue,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}
