// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: variants_qty.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createVariantQty = `-- name: CreateVariantQty :one
INSERT INTO variant_qty(
    id,
    variant_id,
    "name",
    "value",
    isdefault,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, variant_id, name, value, created_at, updated_at, isdefault
`

type CreateVariantQtyParams struct {
	ID        uuid.UUID     `json:"id"`
	VariantID uuid.UUID     `json:"variant_id"`
	Name      string        `json:"name"`
	Value     sql.NullInt32 `json:"value"`
	Isdefault bool          `json:"isdefault"`
	CreatedAt time.Time     `json:"created_at"`
	UpdatedAt time.Time     `json:"updated_at"`
}

func (q *Queries) CreateVariantQty(ctx context.Context, arg CreateVariantQtyParams) (VariantQty, error) {
	row := q.db.QueryRowContext(ctx, createVariantQty,
		arg.ID,
		arg.VariantID,
		arg.Name,
		arg.Value,
		arg.Isdefault,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i VariantQty
	err := row.Scan(
		&i.ID,
		&i.VariantID,
		&i.Name,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Isdefault,
	)
	return i, err
}

const getCountOfUniqueWarehouses = `-- name: GetCountOfUniqueWarehouses :one
SELECT CAST(COALESCE(COUNT(DISTINCT "name"),0) AS INTEGER) FROM variant_qty
`

func (q *Queries) GetCountOfUniqueWarehouses(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCountOfUniqueWarehouses)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getUniqueWarehouses = `-- name: GetUniqueWarehouses :many
SELECT DISTINCT "name" FROM variant_qty
`

func (q *Queries) GetUniqueWarehouses(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUniqueWarehouses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantQty = `-- name: GetVariantQty :many
SELECT 
    "name",
    "value",
    isdefault,
    updated_at
FROM variant_qty
WHERE variant_id = $1
`

type GetVariantQtyRow struct {
	Name      string        `json:"name"`
	Value     sql.NullInt32 `json:"value"`
	Isdefault bool          `json:"isdefault"`
	UpdatedAt time.Time     `json:"updated_at"`
}

func (q *Queries) GetVariantQty(ctx context.Context, variantID uuid.UUID) ([]GetVariantQtyRow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantQty, variantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantQtyRow
	for rows.Next() {
		var i GetVariantQtyRow
		if err := rows.Scan(
			&i.Name,
			&i.Value,
			&i.Isdefault,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantQtyBySKU = `-- name: GetVariantQtyBySKU :many
SELECT
    "name",
    "value",
    isdefault,
    updated_at
FROM variant_qty
WHERE variant_id IN (
    SELECT id FROM variants
    WHERE sku = $1
) AND "name" = $2
`

type GetVariantQtyBySKUParams struct {
	Sku  string `json:"sku"`
	Name string `json:"name"`
}

type GetVariantQtyBySKURow struct {
	Name      string        `json:"name"`
	Value     sql.NullInt32 `json:"value"`
	Isdefault bool          `json:"isdefault"`
	UpdatedAt time.Time     `json:"updated_at"`
}

func (q *Queries) GetVariantQtyBySKU(ctx context.Context, arg GetVariantQtyBySKUParams) ([]GetVariantQtyBySKURow, error) {
	rows, err := q.db.QueryContext(ctx, getVariantQtyBySKU, arg.Sku, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVariantQtyBySKURow
	for rows.Next() {
		var i GetVariantQtyBySKURow
		if err := rows.Scan(
			&i.Name,
			&i.Value,
			&i.Isdefault,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeQty = `-- name: RemoveQty :exec
DELETE FROM variant_qty
WHERE id = $1
`

func (q *Queries) RemoveQty(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeQty, id)
	return err
}

const removeQtyByWarehouseName = `-- name: RemoveQtyByWarehouseName :exec
DELETE FROM variant_qty
WHERE "name" = $1
`

func (q *Queries) RemoveQtyByWarehouseName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, removeQtyByWarehouseName, name)
	return err
}

const updateVariantQty = `-- name: UpdateVariantQty :exec
UPDATE variant_qty
SET
    "name" = COALESCE($1, "name"),
    "value" = COALESCE($2, "value"),
    isdefault = COALESCE($3, isdefault),
    updated_at = $4
WHERE variant_id IN (
    SELECT id FROM variants
    WHERE sku = $5
) AND "name" = $6
`

type UpdateVariantQtyParams struct {
	Name      string        `json:"name"`
	Value     sql.NullInt32 `json:"value"`
	Isdefault bool          `json:"isdefault"`
	UpdatedAt time.Time     `json:"updated_at"`
	Sku       string        `json:"sku"`
	Name_2    string        `json:"name_2"`
}

func (q *Queries) UpdateVariantQty(ctx context.Context, arg UpdateVariantQtyParams) error {
	_, err := q.db.ExecContext(ctx, updateVariantQty,
		arg.Name,
		arg.Value,
		arg.Isdefault,
		arg.UpdatedAt,
		arg.Sku,
		arg.Name_2,
	)
	return err
}
