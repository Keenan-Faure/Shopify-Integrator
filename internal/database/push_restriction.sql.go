// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: push_restriction.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPushRestriction = `-- name: CreatePushRestriction :exec
INSERT INTO push_restriction(
    id,
    field,
    flag,
    updated_at,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreatePushRestrictionParams struct {
	ID        uuid.UUID `json:"id"`
	Field     string    `json:"field"`
	Flag      string    `json:"flag"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreatePushRestriction(ctx context.Context, arg CreatePushRestrictionParams) error {
	_, err := q.db.ExecContext(ctx, createPushRestriction,
		arg.ID,
		arg.Field,
		arg.Flag,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const getPushRestriction = `-- name: GetPushRestriction :many
SELECT id, field, flag, created_at, updated_at FROM push_restriction
`

func (q *Queries) GetPushRestriction(ctx context.Context) ([]PushRestriction, error) {
	rows, err := q.db.QueryContext(ctx, getPushRestriction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PushRestriction
	for rows.Next() {
		var i PushRestriction
		if err := rows.Scan(
			&i.ID,
			&i.Field,
			&i.Flag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePushRestriction = `-- name: UpdatePushRestriction :exec
UPDATE push_restriction
SET
    flag = $1,
    updated_at = $2
WHERE field = $3
`

type UpdatePushRestrictionParams struct {
	Flag      string    `json:"flag"`
	UpdatedAt time.Time `json:"updated_at"`
	Field     string    `json:"field"`
}

func (q *Queries) UpdatePushRestriction(ctx context.Context, arg UpdatePushRestrictionParams) error {
	_, err := q.db.ExecContext(ctx, updatePushRestriction, arg.Flag, arg.UpdatedAt, arg.Field)
	return err
}
