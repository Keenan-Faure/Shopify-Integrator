// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: shopify_webhooks.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getShopifyWebhooks = `-- name: GetShopifyWebhooks :one
SELECT id, shopify_webhook_id, webhook_url, topic, created_at, updated_at FROM shopify_webhooks
LIMIT 1
`

func (q *Queries) GetShopifyWebhooks(ctx context.Context) (ShopifyWebhook, error) {
	row := q.db.QueryRowContext(ctx, getShopifyWebhooks)
	var i ShopifyWebhook
	err := row.Scan(
		&i.ID,
		&i.ShopifyWebhookID,
		&i.WebhookUrl,
		&i.Topic,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeShopifyWebhook = `-- name: RemoveShopifyWebhook :exec
DELETE FROM shopify_webhooks
WHERE shopify_webhook_id = $1
`

func (q *Queries) RemoveShopifyWebhook(ctx context.Context, shopifyWebhookID string) error {
	_, err := q.db.ExecContext(ctx, removeShopifyWebhook, shopifyWebhookID)
	return err
}

const updateShopifyWebhook = `-- name: UpdateShopifyWebhook :exec
UPDATE shopify_webhooks
SET
    shopify_webhook_id = $1,
    webhook_url = $2,
    topic = $3
WHERE id = $4
`

type UpdateShopifyWebhookParams struct {
	ShopifyWebhookID string    `json:"shopify_webhook_id"`
	WebhookUrl       string    `json:"webhook_url"`
	Topic            string    `json:"topic"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateShopifyWebhook(ctx context.Context, arg UpdateShopifyWebhookParams) error {
	_, err := q.db.ExecContext(ctx, updateShopifyWebhook,
		arg.ShopifyWebhookID,
		arg.WebhookUrl,
		arg.Topic,
		arg.ID,
	)
	return err
}
