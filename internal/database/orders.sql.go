// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: orders.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createOrder = `-- name: CreateOrder :execresult
INSERT INTO orders(
    customer_id,
    notes,
    web_code,
    tax_total,
    order_total,
    shipping_total,
    discount_total,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateOrderParams struct {
	CustomerID    []byte         `json:"customer_id"`
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrder,
		arg.CustomerID,
		arg.Notes,
		arg.WebCode,
		arg.TaxTotal,
		arg.OrderTotal,
		arg.ShippingTotal,
		arg.DiscountTotal,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getOrderByCustomer = `-- name: GetOrderByCustomer :many
SELECT
    customer_id,
    notes,
    web_code,
    tax_total,
    order_total,
    shipping_total,
    discount_total,
    updated_at
FROM orders
WHERE customer_id = ?
`

type GetOrderByCustomerRow struct {
	CustomerID    []byte         `json:"customer_id"`
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) GetOrderByCustomer(ctx context.Context, customerID []byte) ([]GetOrderByCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderByCustomerRow
	for rows.Next() {
		var i GetOrderByCustomerRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.Notes,
			&i.WebCode,
			&i.TaxTotal,
			&i.OrderTotal,
			&i.ShippingTotal,
			&i.DiscountTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT
    customer_id,
    notes,
    web_code,
    tax_total,
    order_total,
    shipping_total,
    discount_total,
    updated_at,
    created_at
FROM orders
WHERE id = ?
`

type GetOrderByIDRow struct {
	CustomerID    []byte         `json:"customer_id"`
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
	CreatedAt     time.Time      `json:"created_at"`
}

func (q *Queries) GetOrderByID(ctx context.Context, id []byte) (GetOrderByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i GetOrderByIDRow
	err := row.Scan(
		&i.CustomerID,
		&i.Notes,
		&i.WebCode,
		&i.TaxTotal,
		&i.OrderTotal,
		&i.ShippingTotal,
		&i.DiscountTotal,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOrders = `-- name: GetOrders :many
SELECT
    customer_id,
    notes,
    web_code,
    tax_total,
    order_total,
    shipping_total,
    discount_total,
    updated_at
FROM orders
LIMIT ? OFFSET ?
`

type GetOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetOrdersRow struct {
	CustomerID    []byte         `json:"customer_id"`
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) GetOrders(ctx context.Context, arg GetOrdersParams) ([]GetOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersRow
	for rows.Next() {
		var i GetOrdersRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.Notes,
			&i.WebCode,
			&i.TaxTotal,
			&i.OrderTotal,
			&i.ShippingTotal,
			&i.DiscountTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersSearchByCustomer = `-- name: GetOrdersSearchByCustomer :many
SELECT
    o.notes,
    o.web_code,
    o.tax_total,
    o.order_total,
    o.shipping_total,
    o.discount_total,
    o.updated_at
FROM orders o
INNER JOIN customers c
ON o.customer_id = c.id
WHERE CONCAT(c.first_name, ' ', c.last_name) LIKE ?
LIMIT 10
`

type GetOrdersSearchByCustomerRow struct {
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) GetOrdersSearchByCustomer(ctx context.Context, firstName string) ([]GetOrdersSearchByCustomerRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersSearchByCustomer, firstName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersSearchByCustomerRow
	for rows.Next() {
		var i GetOrdersSearchByCustomerRow
		if err := rows.Scan(
			&i.Notes,
			&i.WebCode,
			&i.TaxTotal,
			&i.OrderTotal,
			&i.ShippingTotal,
			&i.DiscountTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersSearchWebCode = `-- name: GetOrdersSearchWebCode :many
SELECT
    notes,
    web_code,
    tax_total,
    order_total,
    shipping_total,
    discount_total,
    updated_at
FROM orders
WHERE web_code LIKE ?
LIMIT 10
`

type GetOrdersSearchWebCodeRow struct {
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
}

func (q *Queries) GetOrdersSearchWebCode(ctx context.Context, webCode sql.NullString) ([]GetOrdersSearchWebCodeRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersSearchWebCode, webCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrdersSearchWebCodeRow
	for rows.Next() {
		var i GetOrdersSearchWebCodeRow
		if err := rows.Scan(
			&i.Notes,
			&i.WebCode,
			&i.TaxTotal,
			&i.OrderTotal,
			&i.ShippingTotal,
			&i.DiscountTotal,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :execresult
UPDATE orders
SET
    customer_id = ?,
    notes = ?,
    web_code = ?,
    tax_total = ?,
    order_total = ?,
    shipping_total = ?,
    discount_total = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateOrderParams struct {
	CustomerID    []byte         `json:"customer_id"`
	Notes         sql.NullString `json:"notes"`
	WebCode       sql.NullString `json:"web_code"`
	TaxTotal      sql.NullString `json:"tax_total"`
	OrderTotal    sql.NullString `json:"order_total"`
	ShippingTotal sql.NullString `json:"shipping_total"`
	DiscountTotal sql.NullString `json:"discount_total"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ID            []byte         `json:"id"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateOrder,
		arg.CustomerID,
		arg.Notes,
		arg.WebCode,
		arg.TaxTotal,
		arg.OrderTotal,
		arg.ShippingTotal,
		arg.DiscountTotal,
		arg.UpdatedAt,
		arg.ID,
	)
}
