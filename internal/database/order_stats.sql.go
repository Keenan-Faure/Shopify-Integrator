// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: order_stats.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createOrderStat = `-- name: CreateOrderStat :exec
INSERT INTO order_stats(
    id,
    order_total,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
)
`

type CreateOrderStatParams struct {
	ID         uuid.UUID `json:"id"`
	OrderTotal int32     `json:"order_total"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

func (q *Queries) CreateOrderStat(ctx context.Context, arg CreateOrderStatParams) error {
	_, err := q.db.ExecContext(ctx, createOrderStat,
		arg.ID,
		arg.OrderTotal,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrderStat = `-- name: GetOrderStat :one
SELECT
    id,
    order_total,
    created_at,
    updated_at
FROM order_stats
WHERE id = $1
`

func (q *Queries) GetOrderStat(ctx context.Context, id uuid.UUID) (OrderStat, error) {
	row := q.db.QueryRowContext(ctx, getOrderStat, id)
	var i OrderStat
	err := row.Scan(
		&i.ID,
		&i.OrderTotal,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderStats = `-- name: GetOrderStats :many
SELECT 
    order_total
FROM order_stats
WHERE 
    "created_at" BETWEEN NOW() - INTERVAL '24 HOURS' AND NOW()
ORDER BY "created_at" DESC
`

func (q *Queries) GetOrderStats(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getOrderStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var order_total int32
		if err := rows.Scan(&order_total); err != nil {
			return nil, err
		}
		items = append(items, order_total)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
