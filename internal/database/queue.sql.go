// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queue.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createQueueItem = `-- name: CreateQueueItem :one
INSERT INTO queue_items(
    id,
    object_id,
    type,
    instruction,
    status,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id
`

type CreateQueueItemParams struct {
	ID          uuid.UUID `json:"id"`
	ObjectID    uuid.UUID `json:"object_id"`
	Type        string    `json:"type"`
	Instruction string    `json:"instruction"`
	Status      string    `json:"status"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) CreateQueueItem(ctx context.Context, arg CreateQueueItemParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createQueueItem,
		arg.ID,
		arg.ObjectID,
		arg.Type,
		arg.Instruction,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getNextQueueItem = `-- name: GetNextQueueItem :one
SELECT id, object_id, type, instruction, status, created_at, updated_at FROM queue_items
ORDER BY updated_at
LIMIT 1
`

func (q *Queries) GetNextQueueItem(ctx context.Context) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, getNextQueueItem)
	var i QueueItem
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.Type,
		&i.Instruction,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQueueItemByID = `-- name: GetQueueItemByID :one
SELECT id, object_id, type, instruction, status, created_at, updated_at FROM queue_items
WHERE ID = $1
LIMIT 1
`

func (q *Queries) GetQueueItemByID(ctx context.Context, id uuid.UUID) (QueueItem, error) {
	row := q.db.QueryRowContext(ctx, getQueueItemByID, id)
	var i QueueItem
	err := row.Scan(
		&i.ID,
		&i.ObjectID,
		&i.Type,
		&i.Instruction,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQueueItemsByDate = `-- name: GetQueueItemsByDate :many
SELECT id, object_id, type, instruction, status, created_at, updated_at FROM queue_items
ORDER BY updated_at DESC
LIMIT $1 OFFSET $2
`

type GetQueueItemsByDateParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetQueueItemsByDate(ctx context.Context, arg GetQueueItemsByDateParams) ([]QueueItem, error) {
	rows, err := q.db.QueryContext(ctx, getQueueItemsByDate, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []QueueItem
	for rows.Next() {
		var i QueueItem
		if err := rows.Scan(
			&i.ID,
			&i.ObjectID,
			&i.Type,
			&i.Instruction,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeQueueItemByID = `-- name: RemoveQueueItemByID :exec
DELETE FROM queue_items
WHERE id = $1
`

func (q *Queries) RemoveQueueItemByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeQueueItemByID, id)
	return err
}

const removeQueueItemsByInstruction = `-- name: RemoveQueueItemsByInstruction :exec
DELETE FROM queue_items
WHERE instruction IN ($1)
`

func (q *Queries) RemoveQueueItemsByInstruction(ctx context.Context, instruction string) error {
	_, err := q.db.ExecContext(ctx, removeQueueItemsByInstruction, instruction)
	return err
}

const removeQueueItemsByStatus = `-- name: RemoveQueueItemsByStatus :exec
DELETE FROM queue_items
WHERE "status" IN ($1)
`

func (q *Queries) RemoveQueueItemsByStatus(ctx context.Context, status string) error {
	_, err := q.db.ExecContext(ctx, removeQueueItemsByStatus, status)
	return err
}

const updateQueueItem = `-- name: UpdateQueueItem :exec
UPDATE queue_items
SET
    status = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateQueueItemParams struct {
	Status    string    `json:"status"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        uuid.UUID `json:"id"`
}

func (q *Queries) UpdateQueueItem(ctx context.Context, arg UpdateQueueItemParams) error {
	_, err := q.db.ExecContext(ctx, updateQueueItem, arg.Status, arg.UpdatedAt, arg.ID)
	return err
}
