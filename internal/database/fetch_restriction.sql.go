// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: fetch_restriction.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFetchRestriction = `-- name: CreateFetchRestriction :exec
INSERT INTO fetch_restriction(
    id,
    field,
    flag,
    updated_at,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateFetchRestrictionParams struct {
	ID        uuid.UUID `json:"id"`
	Field     string    `json:"field"`
	Flag      string    `json:"flag"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateFetchRestriction(ctx context.Context, arg CreateFetchRestrictionParams) error {
	_, err := q.db.ExecContext(ctx, createFetchRestriction,
		arg.ID,
		arg.Field,
		arg.Flag,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const getFetchRestriction = `-- name: GetFetchRestriction :many
SELECT id, field, flag, created_at, updated_at FROM fetch_restriction
`

func (q *Queries) GetFetchRestriction(ctx context.Context) ([]FetchRestriction, error) {
	rows, err := q.db.QueryContext(ctx, getFetchRestriction)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchRestriction
	for rows.Next() {
		var i FetchRestriction
		if err := rows.Scan(
			&i.ID,
			&i.Field,
			&i.Flag,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFetchRestriction = `-- name: UpdateFetchRestriction :exec
UPDATE fetch_restriction
SET
    flag = $1,
    updated_at = $2
WHERE field = $3
`

type UpdateFetchRestrictionParams struct {
	Flag      string    `json:"flag"`
	UpdatedAt time.Time `json:"updated_at"`
	Field     string    `json:"field"`
}

func (q *Queries) UpdateFetchRestriction(ctx context.Context, arg UpdateFetchRestrictionParams) error {
	_, err := q.db.ExecContext(ctx, updateFetchRestriction, arg.Flag, arg.UpdatedAt, arg.Field)
	return err
}
