// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: customer_orders.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCustomerOrder = `-- name: CreateCustomerOrder :exec
INSERT INTO customer_orders (
    id,
    customer_id,
    order_id,
    updated_at,
    created_at
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateCustomerOrderParams struct {
	ID         uuid.UUID `json:"id"`
	CustomerID uuid.UUID `json:"customer_id"`
	OrderID    uuid.UUID `json:"order_id"`
	UpdatedAt  time.Time `json:"updated_at"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) CreateCustomerOrder(ctx context.Context, arg CreateCustomerOrderParams) error {
	_, err := q.db.ExecContext(ctx, createCustomerOrder,
		arg.ID,
		arg.CustomerID,
		arg.OrderID,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	return err
}

const getCustomerByOrderID = `-- name: GetCustomerByOrderID :one
SELECT
    customer_id
FROM customer_orders
WHERE order_id = $1
`

func (q *Queries) GetCustomerByOrderID(ctx context.Context, orderID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getCustomerByOrderID, orderID)
	var customer_id uuid.UUID
	err := row.Scan(&customer_id)
	return customer_id, err
}

const getOrderIDByCustomerID = `-- name: GetOrderIDByCustomerID :one
SELECT
    order_id
FROM customer_orders
WHERE customer_id = $1 AND order_id = $2
`

type GetOrderIDByCustomerIDParams struct {
	CustomerID uuid.UUID `json:"customer_id"`
	OrderID    uuid.UUID `json:"order_id"`
}

func (q *Queries) GetOrderIDByCustomerID(ctx context.Context, arg GetOrderIDByCustomerIDParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getOrderIDByCustomerID, arg.CustomerID, arg.OrderID)
	var order_id uuid.UUID
	err := row.Scan(&order_id)
	return order_id, err
}

const getOrdersByCustomerID = `-- name: GetOrdersByCustomerID :many
SELECT
    order_id
FROM customer_orders
WHERE customer_id = $1
`

func (q *Queries) GetOrdersByCustomerID(ctx context.Context, customerID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByCustomerID, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var order_id uuid.UUID
		if err := rows.Scan(&order_id); err != nil {
			return nil, err
		}
		items = append(items, order_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCustomerOrdersByOrderID = `-- name: RemoveCustomerOrdersByOrderID :exec
DELETE FROM customer_orders
WHERE order_id = (
    SELECT id
    FROM orders
    WHERE web_code = $1
)
`

func (q *Queries) RemoveCustomerOrdersByOrderID(ctx context.Context, webCode string) error {
	_, err := q.db.ExecContext(ctx, removeCustomerOrdersByOrderID, webCode)
	return err
}
