// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: fetch_stats.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFetchStat = `-- name: CreateFetchStat :exec
INSERT INTO fetch_stats(
    id,
    amount_of_products,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4
)
`

type CreateFetchStatParams struct {
	ID               uuid.UUID `json:"id"`
	AmountOfProducts int32     `json:"amount_of_products"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) CreateFetchStat(ctx context.Context, arg CreateFetchStatParams) error {
	_, err := q.db.ExecContext(ctx, createFetchStat,
		arg.ID,
		arg.AmountOfProducts,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getFetchStat = `-- name: GetFetchStat :one
SELECT
    id,
    amount_of_products,
    created_at,
    updated_at
FROM fetch_stats
WHERE id = $1
`

func (q *Queries) GetFetchStat(ctx context.Context, id uuid.UUID) (FetchStat, error) {
	row := q.db.QueryRowContext(ctx, getFetchStat, id)
	var i FetchStat
	err := row.Scan(
		&i.ID,
		&i.AmountOfProducts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFetchStats = `-- name: GetFetchStats :many
SELECT 
    amount_of_products
FROM fetch_stats
WHERE 
    "created_at" BETWEEN NOW() - INTERVAL '24 HOURS' AND NOW()
ORDER BY "created_at" DESC
`

func (q *Queries) GetFetchStats(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFetchStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var amount_of_products int32
		if err := rows.Scan(&amount_of_products); err != nil {
			return nil, err
		}
		items = append(items, amount_of_products)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
