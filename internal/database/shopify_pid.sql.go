// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: shopify_pid.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPID = `-- name: CreatePID :exec
INSERT INTO shopify_pid(
    id,
    product_code,
    product_id,
    shopify_product_id,
    created_at,
    updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6
)
`

type CreatePIDParams struct {
	ID               uuid.UUID `json:"id"`
	ProductCode      string    `json:"product_code"`
	ProductID        uuid.UUID `json:"product_id"`
	ShopifyProductID string    `json:"shopify_product_id"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) CreatePID(ctx context.Context, arg CreatePIDParams) error {
	_, err := q.db.ExecContext(ctx, createPID,
		arg.ID,
		arg.ProductCode,
		arg.ProductID,
		arg.ShopifyProductID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getPIDByProductCode = `-- name: GetPIDByProductCode :one
SELECT
    product_code,
    shopify_product_id,
    updated_at
FROM shopify_pid
WHERE product_code = $1
LIMIT 1
`

type GetPIDByProductCodeRow struct {
	ProductCode      string    `json:"product_code"`
	ShopifyProductID string    `json:"shopify_product_id"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) GetPIDByProductCode(ctx context.Context, productCode string) (GetPIDByProductCodeRow, error) {
	row := q.db.QueryRowContext(ctx, getPIDByProductCode, productCode)
	var i GetPIDByProductCodeRow
	err := row.Scan(&i.ProductCode, &i.ShopifyProductID, &i.UpdatedAt)
	return i, err
}

const getPIDBySKU = `-- name: GetPIDBySKU :one
SELECT
    shopify_product_id
FROM shopify_pid
WHERE product_code IN (
    SELECT
        product_code
    FROM products
    WHERE id IN (
        SELECT
            product_id
        FROM variants
        WHERE sku = $1
    )
)
LIMIT 1
`

func (q *Queries) GetPIDBySKU(ctx context.Context, sku string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPIDBySKU, sku)
	var shopify_product_id string
	err := row.Scan(&shopify_product_id)
	return shopify_product_id, err
}

const updatePID = `-- name: UpdatePID :exec
UPDATE shopify_pid
SET
    shopify_product_id = $1,
    updated_at = $2
WHERE product_code = $3
`

type UpdatePIDParams struct {
	ShopifyProductID string    `json:"shopify_product_id"`
	UpdatedAt        time.Time `json:"updated_at"`
	ProductCode      string    `json:"product_code"`
}

func (q *Queries) UpdatePID(ctx context.Context, arg UpdatePIDParams) error {
	_, err := q.db.ExecContext(ctx, updatePID, arg.ShopifyProductID, arg.UpdatedAt, arg.ProductCode)
	return err
}

const upsertPID = `-- name: UpsertPID :exec
INSERT INTO shopify_pid(
    id,
    product_code,
    product_id,
    shopify_product_id,
    created_at,
    updated_at
) VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT(product_code)
DO UPDATE
SET
    shopify_product_id = COALESCE($4, shopify_pid.shopify_product_id),
    updated_at = $6
`

type UpsertPIDParams struct {
	ID               uuid.UUID `json:"id"`
	ProductCode      string    `json:"product_code"`
	ProductID        uuid.UUID `json:"product_id"`
	ShopifyProductID string    `json:"shopify_product_id"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
}

func (q *Queries) UpsertPID(ctx context.Context, arg UpsertPIDParams) error {
	_, err := q.db.ExecContext(ctx, upsertPID,
		arg.ID,
		arg.ProductCode,
		arg.ProductID,
		arg.ShopifyProductID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
